{"version":3,"sources":["store/actions.js","API/Weatherbit.js","store/actionTypes.js","components/CitySearch/Form.js","components/CityWeather/Card.js","components/Error/Message.js","components/HowToUse/Modal.js","components/HelpIcone/Icone.js","components/App/App.js","serviceWorker.js","store/reducers.js","index.js"],"names":["fetchData","city","dispatch","axios","get","params","key","units","then","res","data","catch","err","console","log","getData","response","fetchDataSuccess","error","fetchDataFAIL","type","changeHowtoUseVisibility","Form","_ref","submit","changed","value","placeholder","react_default","a","createElement","onSubmit","className","onChange","CityWeatherCard","state","show","onClickHandler","_this","setState","prevState","_this$props","this","props","cityName","weatherIconCode","weatherDescription","temperature","cloudCoverage","humidity","pressure","wind","moreInfo","Fragment","style","borderTop","paddingTop","concat","windDirection","windSpeed","onClick","backgroundImage","paddingBottom","color","fontSize","position","bottom","right","Component","connect","ErrorMessage","closeModal","actions","showHideModal","App","searchCityName","onSubmitFormHanlder","e","preventDefault","clearStore","localStorage","setItem","onInputChangeHandler","target","getItem","showHowToUse","CitySearch_Form","CityWeather_Card","Error_Message","HowToUse_Modal","HelpIcone_Icone","Boolean","window","location","hostname","match","initialState","reducer","arguments","length","undefined","action","Object","objectSpread","city_name","weather","icon","temp","description","clouds","rh","pres","wind_cdir","wind_spd","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","app","es","components_App_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.61723ddb.chunk.js","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport { getData } from \"../API/Weatherbit\";\n\nexport const fetchData = city => {\n  return dispatch => {\n    getData(city)\n      .then(response => {\n        console.log(response);\n        dispatch(fetchDataSuccess(response));\n      })\n      .catch(error => {\n        dispatch(fetchDataFAIL());\n        console.error(\"Action Error:\", error);\n      });\n  };\n};\n\nexport const fetchDataSuccess = data => {\n  return {\n    type: actionTypes.FETCH_DATA_SUCCESS,\n    data: data\n  };\n};\nexport const fetchDataFAIL = err => {\n  return {\n    type: actionTypes.FETCH_DATA_FAIL\n  };\n};\nexport const clearStore = () => {\n  return { type: actionTypes.CLEAR_STORE };\n};\n\nexport const changeHowtoUseVisibility = () => {\n  console.log(\"changeHowtoUseVisibility\");\n  return { type: actionTypes.CHANGE_HOW_TO_USE_VISIBILITY };\n};\n","import axios from \"axios\";\n\nexport function getData(city) {\n  return axios\n    .get(\"https://api.weatherbit.io/v2.0/current?\", {\n      params: {\n        key: \"1274cb1601cc4f95ac81a20298c26e00\",\n        city: city,\n        units: \"M\"\n      }\n    })\n    .then(res => {\n      return res.data.data[0];\n    })\n    .catch(err => console.log(err));\n}\n","export const FETCH_DATA_SUCCESS = \"FETCH_DATA_SUCCESS\";\nexport const FETCH_DATA_FAIL = \"FETCH_DATA_FAIL\";\nexport const CLEAR_STORE = \"CLEAR_STORE\";\nexport const CHANGE_HOW_TO_USE_VISIBILITY = \"CHANGE_HOW_TO_USE_VISIBILITY\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Form.css\";\n\nForm.propTypes = {\n  submit: PropTypes.func.isRequired,\n  changed: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n  placeholder: PropTypes.string\n};\n\nfunction Form({ submit, changed, value, placeholder }) {\n  return (\n    <form onSubmit={submit}>\n      <div className=\"Form\">\n        <input\n          type=\"text\"\n          className=\"Input\"\n          onChange={changed}\n          value={value}\n          placeholder={placeholder ? placeholder : \"Enter text ...\"}\n        />\n      </div>\n    </form>\n  );\n}\nexport default Form;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Card.css\";\n\nclass CityWeatherCard extends Component {\n  state = {\n    show: false\n  };\n\n  static propTypes = {\n    cityName: PropTypes.string.isRequired,\n    weatherIconCode: PropTypes.string.isRequired,\n    weatherDescription: PropTypes.string.isRequired,\n    temperature: PropTypes.number.isRequired,\n    clouds: PropTypes.number,\n    humidity: PropTypes.number,\n    pressure: PropTypes.number,\n    wind: PropTypes.object\n  };\n\n  onClickHandler = () => {\n    this.setState(prevState => ({\n      show: !prevState.show\n    }));\n  };\n\n  render() {\n    const {\n      cityName,\n      weatherIconCode,\n      weatherDescription,\n      temperature,\n      cloudCoverage,\n      humidity,\n      pressure,\n      wind\n    } = this.props;\n    const moreInfo = (\n      <>\n        <h2 style={{ borderTop: \"2px dashed black\", paddingTop: \"1.5rem\" }}>\n          Cloud coverage: {cloudCoverage}%\n        </h2>\n        <h2>Humidity : {humidity}%</h2>\n        <h2>Pressure : {pressure} hPa</h2>\n        <h2>\n          Wind: {wind ? `${wind.windDirection} ${wind.windSpeed} m/s` : null}{\" \"}\n        </h2>\n      </>\n    );\n    return (\n      <div className=\"Card\" onClick={this.onClickHandler}>\n        {weatherIconCode ? (\n          <div\n            className=\"Img\"\n            style={{\n              backgroundImage: `url(https://www.weatherbit.io/static/img/icons/${weatherIconCode}.png)`\n            }}\n          />\n        ) : null}\n        <h2>{cityName}</h2>\n        <h2>{temperature} &deg;C</h2>\n        <h2\n          style={{\n            paddingBottom: \"1.5rem\"\n          }}\n        >\n          {weatherDescription}\n        </h2>\n        {this.state.show ? (\n          moreInfo\n        ) : (\n          <p\n            style={{\n              color: \"#333\",\n              fontSize: \"1.1rem\",\n              position: \"absolute\",\n              bottom: \"-6px\",\n              right: \"10px\"\n            }}\n          >\n            Tap for More ...\n          </p>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cityName: state.cityName,\n    weatherIconCode: state.weatherIconCode,\n    weatherDescription: state.weatherDescription,\n    temperature: state.temperature,\n    cloudCoverage: state.cloudCoverage,\n    humidity: state.humidity,\n    pressure: state.pressure,\n    wind: state.wind\n  };\n};\n\nexport default connect(mapStateToProps)(CityWeatherCard);\n","import React from \"react\";\nimport \"./Message.css\";\n\nconst ErrorMessage = () => {\n  return (\n    <div className=\"Error\">\n      <p>Whoops. We haven't data about weather in your city.</p>\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Modal.css\";\n\nModalHowToUse.propTypes = {\n  closeModal: PropTypes.func.isRequired\n};\n\nfunction ModalHowToUse({ closeModal }) {\n  return (\n    <div className=\"ModalHowToUse\" onClick={closeModal}>\n      <div className=\"ModalHowToUse_modal\">\n        <h3 className=\"ModalHowToUse_heading\">How to use</h3>\n        <ul className=\"ModalHowToUse_instrucion\">\n          <li>Press on the input field.</li>\n          <li>\n            If underline change color to white, enter city name and press enter\n          </li>\n          <li>\n            If you want more information about weather in selected city press\n            the card\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closeModal: () => dispatch(actions.changeHowtoUseVisibility())\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(ModalHowToUse);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions\";\nimport PropTypes from \"prop-types\";\nimport \"./Icone.css\";\nHelpIcone.propTypes = {\n  showHideModal: PropTypes.func.isRequired\n};\nfunction HelpIcone({ showHideModal }) {\n  return (\n    <button className=\"HelpIcone\" onClick={showHideModal}>\n      ?\n    </button>\n  );\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    showHideModal: () => {\n      dispatch(actions.changeHowtoUseVisibility());\n    }\n  };\n};\nexport default connect(\n  null,\n  mapDispatchToProps\n)(HelpIcone);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions\";\nimport PropTypes from \"prop-types\";\n\nimport Form from \"../CitySearch/Form\";\nimport CityWeatherCard from \"../CityWeather/Card\";\nimport ErrorMessage from \"../Error/Message\";\nimport ModalHowToUse from \"../HowToUse/Modal\";\nimport HelpIcone from \"../HelpIcone/Icone\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    searchCityName: \"\"\n  };\n\n  static propTypes = {\n    cityName: PropTypes.string,\n    error: PropTypes.bool,\n    showHowToUse: PropTypes.bool\n  };\n  componentDidMount() {\n    if (localStorage.getItem(\"City\")) {\n      this.setState({ searchCityName: localStorage.getItem(\"City\") });\n      this.props.onSubmit(localStorage.getItem(\"City\"));\n    }\n  }\n  onSubmitFormHanlder = e => {\n    e.preventDefault();\n    this.props.clearStore();\n    localStorage.setItem(\"City\", this.state.searchCityName);\n    this.props.onSubmit(this.state.searchCityName);\n  };\n  onInputChangeHandler = e => {\n    this.setState({ searchCityName: e.target.value });\n  };\n\n  render() {\n    const { searchCityName } = this.state;\n    const { cityName, error, showHowToUse } = this.props;\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-heading\">Weather App</h1>\n        <Form\n          submit={this.onSubmitFormHanlder}\n          changed={this.onInputChangeHandler}\n          value={searchCityName}\n        />\n        {cityName && <CityWeatherCard />}\n        {error && <ErrorMessage />}\n        {showHowToUse ? <ModalHowToUse /> : <HelpIcone />}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    cityName: state.cityName,\n    error: state.error,\n    showHowToUse: state.showHowToUse\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSubmit: city => dispatch(actions.fetchData(city)),\n    clearStore: () => dispatch(actions.clearStore())\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"./actionTypes\";\nconst initialState = { showHowToUse: false };\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_DATA_SUCCESS:\n      return {\n        ...state,\n        cityName: action.data.city_name,\n        weatherIconCode: action.data.weather.icon,\n        temperature: action.data.temp,\n        weatherDescription: action.data.weather.description,\n        cloudCoverage: action.data.clouds,\n        humidity: action.data.rh,\n        pressure: action.data.pres,\n        wind: {\n          windDirection: action.data.wind_cdir,\n          windSpeed: action.data.wind_spd\n        },\n        error: false\n      };\n    case actionTypes.FETCH_DATA_FAIL:\n      return { ...state, error: true };\n    case actionTypes.CHANGE_HOW_TO_USE_VISIBILITY:\n      return { ...state, showHowToUse: !state.showHowToUse };\n    case actionTypes.CLEAR_STORE:\n      return initialState;\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./store/reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\nReactDOM.render(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}